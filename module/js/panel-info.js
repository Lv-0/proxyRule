/*
 * Surge ÁΩëÁªúËØ¶ÊÉÖÈù¢Êùø
 * Ëá™Áî®
 */
const { wifi, v4, v6 } = $network;

let cellularInfo = '';

const radioGeneration = {
    'GPRS': '2.5G',
    'CDMA1x': '2.5G',
    'EDGE': '2.75G',
    'WCDMA': '3G',
    'HSDPA': '3.5G',
    'CDMAEVDORev0': '3.5G',
    'CDMAEVDORevA': '3.5G',
    'CDMAEVDORevB': '3.75G',
    'HSUPA': '3.75G',
    'eHRPD': '3.9G',
    'LTE': '4G',
    'NRNSA': '5G',
    'NR': '5G',
};

const carrierNames = loadCarrierNames();
//ÊµÅÈáèÊé•Âè£
const TRAFFIC_URL = 'http://47.115.1.20:19999/getTraffic'

let trafficInfo = '';

//youtube
const BASE_URL_FOR_YOUTUBE = 'https://www.youtube.com/premium'
const DEFAULT_OPTIONS_YOUTUBE = {
    title: 'YouTube Premium :',
    availableContent: ' #REGION_FLAG# #REGION_NAME#',
    availableIcon: '',
    availableIconColor: '',
    availableStyle: 'good',
    notAvailableContent: '‰∏çÊîØÊåÅ YouTube Premium',
    notAvailableIcon: '',
    notAvailableIconColor: '',
    notAvailableStyle: 'alert',
    errorContent: 'Ê£ÄÊµãÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
    errorIcon: '',
    errorIconColor: '',
    errorStyle: 'error',
}
let options_youtube = getOptionsYouTube()
let panel_youtube = {
    title: options_youtube.title,
}

//netflix
const BASE_URL_FOR_NETFLIX = 'https://www.netflix.com/title/'
const FILM_ID = 81215567
const AREA_TEST_FILM_ID = 80018499
const DEFAULT_OPTIONS_NETFLIX = {
    title: 'Netflix :',
    fullContent: ' #REGION_FLAG# #REGION_NAME#',
    fullIcon: '',
    fullIconColor: '',
    fullStyle: 'good',
    onlyOriginalContent: '‰ªÖÊîØÊåÅËá™Âà∂ÂâßÔºå#REGION_FLAG# #REGION_NAME#',
    onlyOriginalIcon: '',
    onlyOriginalIconColor: '',
    onlyOriginalStyle: 'info',
    notAvailableContent: '‰∏çÊîØÊåÅ Netflix',
    notAvailableIcon: '',
    notAvailableIconColor: '',
    notAvailableStyle: 'alert',
    errorContent: 'Ê£ÄÊµãÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
    errorIcon: '',
    errorIconColor: '',
    errorStyle: 'error',
}
let options_netflix = getOptionsNetflix()
let panel_netflix = {
    title: options_netflix.title,
}


if (!v4.primaryAddress && !v6.primaryAddress) {
    $done({
        title: 'Ê≤íÊúâÁΩëÁªú',
        content: 'Â∞öÊú™ËøûÊé•Ëá≥ÁΩëÁªú\nËØ∑Ê£ÄÊü•ÁΩëÁªúÁä∂ÊÄÅÂêéÈáçËØï',
        icon: 'wifi.exclamationmark',
        'icon-color': '#CB1B45',
    });
} else {
    if ($network['cellular-data']) {
        const carrierId = $network['cellular-data'].carrier;
        const radio = $network['cellular-data'].radio;
        if (carrierId && radio) {
            cellularInfo = carrierNames[carrierId] ?
                carrierNames[carrierId] + ' | ' + radioGeneration[radio] + ' - ' + radio :
                'ËúÇÁ™ùÊï∞ÊçÆ | ' + radioGeneration[radio] + ' - ' + radio;
        }
    }
    $httpClient.get(TRAFFIC_URL, function (error, response, data) {
        trafficInfo = JSON.parse(data);
    })
    $httpClient.get('http://ip-api.com/json', function (error, response, data) {
        if (error) {
            $done({
                title: 'ÂèëÁîüÈîôËØØ',
                content: 'Êó†Ê≥ïËé∑ÂèñÁõÆÂâçÁΩëÁªú‰ø°ÊÅØ\nËØ∑Ê£ÄÊü•ÁΩëÁªúÁä∂ÊÄÅÂêéÈáçËØï',
                icon: 'wifi.exclamationmark',
                'icon-color': '#CB1B45',
            });
        }

        const info = JSON.parse(data);

        ;(async () => {
            //youtube
            await Promise.race([test_youtube(), timeout(10000)])
                .then(region => {
                    panel_youtube['content'] = replaceRegionPlaceholder(DEFAULT_OPTIONS_YOUTUBE.availableContent, region)
                })
                .catch(error => {
                    if (error !== 'Not Available') {
                        return Promise.reject(error)
                    }
                    panel_youtube['content'] = DEFAULT_OPTIONS_YOUTUBE.notAvailableContent
                })
            //netflix
            await Promise.race([test_netflix(FILM_ID), timeout(10000)])
                .then(async region => {
                    let content = DEFAULT_OPTIONS_NETFLIX.fullContent
                    if (content.indexOf('#REGION_FLAG#') !== -1) {
                        content.replaceAll('#REGION_FLAG#')
                    }

                    panel_netflix['content'] = replaceRegionPlaceholder(DEFAULT_OPTIONS_NETFLIX.fullContent, region)
                })
                .catch(async error => {
                    if (error !== 'Not Found') {
                        return Promise.reject(error)
                    }
                    if (
                        DEFAULT_OPTIONS_NETFLIX.onlyOriginalContent.indexOf('#REGION_FLAG#') === -1 &&
                        DEFAULT_OPTIONS_NETFLIX.onlyOriginalContent.indexOf('#REGION_CODE#') === -1 &&
                        DEFAULT_OPTIONS_NETFLIX.onlyOriginalContent.indexOf('#REGION_NAME#') === -1 &&
                        DEFAULT_OPTIONS_NETFLIX.onlyOriginalContent.indexOf('#REGION_NAME_EN#') === -1
                    ) {
                        panel_netflix['content'] = DEFAULT_OPTIONS_NETFLIX.onlyOriginalContent
                        return
                    }
                    let region = await Promise.race([test_netflix(AREA_TEST_FILM_ID), timeout(10000)])
                    panel_netflix['content'] = replaceRegionPlaceholder(DEFAULT_OPTIONS_NETFLIX.onlyOriginalContent, region)
                })
                .catch(error => {
                    if (error !== 'Not Available') {
                        return Promise.reject(error)
                    }
                    panel_netflix['content'] = DEFAULT_OPTIONS_NETFLIX.notAvailableContent
                })

        })()
            .catch(error => {
                console.log(error)
                panel_youtube['content'] = DEFAULT_OPTIONS_YOUTUBE.errorContent
                panel_netflix['content'] = DEFAULT_OPTIONS_NETFLIX.errorContent
            })
            .finally(() => {
                $done({
                    title: wifi.ssid ? wifi.ssid : cellularInfo,
                    content:
                        `üß™ Node Info\n` +
                        (v4.primaryAddress ? `IPv4 : ${v4.primaryAddress} \n` : '') +
                        (v6.primaryAddress ? `IPv6 : ${v6.primaryAddress}\n` : '') +
                        (v4.primaryRouter && wifi.ssid ? `Router IPv4 : ${v4.primaryRouter}\n` : '') +
                        (v6.primaryRouter && wifi.ssid ? `Router IPv6 : ${v6.primaryRouter}\n` : '') +
                        `Node IP : ${info.query}\n` +
                        `Node ISP : ${info.isp}\n` +
                        `Node Address : ${getFlagEmoji(info.countryCode)} | ${info.country} - ${info.city}\n\n` +
                        `üß¨ Proxy Info\n` +
                        `Proxy Level : Premium!\n` +
                        `Traffic : ${trafficInfo.data.traffic}\n` +
                        `Traffic Reset : ${trafficInfo.data.Reset}\n` +
                        `Expire Date : ${trafficInfo.data.Expire}\n\n` +
                        `ü¶† Streaming Info\n` +
                        panel_youtube.title + panel_youtube.content + '\n' +
                        panel_netflix.title + panel_netflix.content,
                    icon: wifi.ssid ? 'wifi' : 'simcard',
                    'icon-color': wifi.ssid ? '#005CAF' : '#F9BF45',
                });
            })



    });
}

function getFlagEmoji(countryCode) {
    const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map((char) => 127397 + char.charCodeAt());
    return String.fromCodePoint(...codePoints);
}

//youtube

function test_youtube() {
    return new Promise((resolve, reject) => {
        let option = {
            url: BASE_URL_FOR_YOUTUBE,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36',
                'Accept-Language': 'en',
            },
        }
        $httpClient.get(option, function (error, response, data) {
            if (error != null || response.status !== 200) {
                reject('Error')
                return
            }

            if (data.indexOf('Premium is not available in your country') !== -1) {
                reject('Not Available')
                return
            }

            let region = ''
            let re = new RegExp('"countryCode":"(.*?)"', 'gm')
            let result = re.exec(data)
            if (result != null && result.length === 2) {
                region = result[1]
            } else if (data.indexOf('www.google.cn') !== -1) {
                region = 'CN'
            } else {
                region = 'US'
            }
            resolve(region.toUpperCase())
        })
    })
}

function timeout(delay = 5000) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            reject('Timeout')
        }, delay)
    })
}

function getCountryFlagEmoji(countryCode) {
    if (countryCode.toUpperCase() == 'TW') {
        countryCode = 'CN'
    }
    const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map(char => 127397 + char.charCodeAt())
    return String.fromCodePoint(...codePoints)
}

function getOptionsYouTube() {
    let options = Object.assign({}, DEFAULT_OPTIONS_YOUTUBE)
    if (typeof $argument != 'undefined') {
        try {
            let params = Object.fromEntries(
                $argument
                    .split('&')
                    .map(item => item.split('='))
                    .map(([k, v]) => [k, decodeURIComponent(v)])
            )
            Object.assign(options, params)
        } catch (error) {
            console.error(`$argument Ëß£ÊûêÂ§±Ë¥•Ôºå$argument: + ${argument}`)
        }
    }

    return options
}

function replaceRegionPlaceholder(content, region) {
    let result = content

    if (result.indexOf('#REGION_CODE#') !== -1) {
        result = result.replaceAll('#REGION_CODE#', region.toUpperCase())
    }
    if (result.indexOf('#REGION_FLAG#') !== -1) {
        result = result.replaceAll('#REGION_FLAG#', getCountryFlagEmoji(region.toUpperCase()))
    }

    if (result.indexOf('#REGION_NAME#') !== -1) {
        result = result.replaceAll('#REGION_NAME#', RESION_NAMES?.[region.toUpperCase()]?.chinese ?? '')
    }

    if (result.indexOf('#REGION_NAME_EN#') !== -1) {
        result = result.replaceAll('#REGION_NAME_EN#', RESION_NAMES?.[region.toUpperCase()]?.english ?? '')
    }

    return result
}


//netflix
function test_netflix(filmId) {
    return new Promise((resolve, reject) => {
        let option = {
            url: BASE_URL_FOR_NETFLIX + filmId,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36',
            },
        }
        $httpClient.get(option, function (error, response, data) {
            if (error != null) {
                reject(error)
                return
            }

            if (response.status === 403) {
                reject('Not Available')
                return
            }

            if (response.status === 404) {
                reject('Not Found')
                return
            }

            if (response.status === 200) {
                let url = response.headers['x-originating-url']
                let region = url.split('/')[3]
                region = region.split('-')[0]
                if (region == 'title') {
                    region = 'us'
                }
                resolve(region.toUpperCase())
                return
            }

            reject('Error')
        })
    })
}

function getOptionsNetflix() {
    let options = Object.assign({}, DEFAULT_OPTIONS_NETFLIX)
    if (typeof $argument != 'undefined') {
        try {
            let params = Object.fromEntries(
                $argument
                    .split('&')
                    .map(item => item.split('='))
                    .map(([k, v]) => [k, decodeURIComponent(v)])
            )
            Object.assign(options, params)
        } catch (error) {
            console.error(`$argument Ëß£ÊûêÂ§±Ë¥•Ôºå$argument: + ${argument}`)
        }
    }

    return options
}



// prettier-ignore
const RESION_NAMES={AF:{chinese:"ÈòøÂØåÊ±ó",english:"Afghanistan",},AL:{chinese:"ÈòøÂ∞îÂ∑¥Â∞º‰∫ö",english:"Albania",},DZ:{chinese:"ÈòøÂ∞îÂèäÂà©‰∫ö",english:"Algeria",},AO:{chinese:"ÂÆâÂì•Êãâ",english:"Angola",},AR:{chinese:"ÈòøÊ†πÂª∑",english:"Argentina",},AM:{chinese:"‰∫öÁæéÂ∞º‰∫ö",english:"Armenia",},AU:{chinese:"Êæ≥Â§ßÂà©‰∫ö",english:"Australia",},AT:{chinese:"Â••Âú∞Âà©",english:"Austria",},AZ:{chinese:"ÈòøÂ°ûÊãúÁñÜ",english:"Azerbaijan",},BH:{chinese:"Â∑¥Êûó",english:"Bahrain",},BD:{chinese:"Â≠üÂä†ÊãâÂõΩ",english:"Bangladesh",},BY:{chinese:"ÁôΩ‰øÑÁΩóÊñØ",english:"Belarus",},BE:{chinese:"ÊØîÂà©Êó∂",english:"Belgium",},BZ:{chinese:"‰ºØÂà©ÂÖπ",english:"Belize",},BJ:{chinese:"Ë¥ùÂÆÅ",english:"Benin",},BT:{chinese:"‰∏ç‰∏π",english:"Bhutan",},BO:{chinese:"ÁéªÂà©Áª¥‰∫ö",english:"Bolivia",},BA:{chinese:"Ê≥¢ÊñØÂ∞º‰∫öÂíåÈªëÂ°ûÂì•Áª¥ÈÇ£",english:"Bosnia and Herzegovina",},BW:{chinese:"ÂçöËå®Áì¶Á∫≥",english:"Botswana",},BR:{chinese:"Â∑¥Ë•ø",english:"Brazil",},VG:{chinese:"Ëã±Â±ûÁª¥‰∫¨Áæ§Â≤õ",english:"British Virgin Islands",},BN:{chinese:"ÊñáËé±",english:"Brunei",},BG:{chinese:"‰øùÂä†Âà©‰∫ö",english:"Bulgaria",},BF:{chinese:"Â∏ÉÂü∫Á∫≥Ê≥ïÁ¥¢",english:"Burkina-faso",},BI:{chinese:"Â∏ÉÈöÜËø™",english:"Burundi",},KH:{chinese:"Êü¨ÂüîÂØ®",english:"Cambodia",},CM:{chinese:"ÂñÄÈ∫¶ÈöÜ",english:"Cameroon",},CA:{chinese:"Âä†ÊãøÂ§ß",english:"Canada",},CV:{chinese:"‰ΩõÂæóËßí",english:"Cape Verde",},KY:{chinese:"ÂºÄÊõºÁæ§Â≤õ",english:"Cayman Islands",},CF:{chinese:"‰∏≠ÈùûÂÖ±ÂíåÂõΩ",english:"Central African Republic",},TD:{chinese:"‰πçÂæó",english:"Chad",},CL:{chinese:"Êô∫Âà©",english:"Chile",},CN:{chinese:"‰∏≠ÂõΩ",english:"China",},CO:{chinese:"Âì•‰º¶ÊØî‰∫ö",english:"Colombia",},KM:{chinese:"ÁßëÊë©ÁΩó",english:"Comoros",},CG:{chinese:"ÂàöÊûú(Â∏É)",english:"Congo - Brazzaville",},CD:{chinese:"ÂàöÊûú(Èáë)",english:"Congo - Kinshasa",},CR:{chinese:"Âì•ÊñØËææÈªéÂä†",english:"Costa Rica",},HR:{chinese:"ÂÖãÁΩóÂú∞‰∫ö",english:"Croatia",},CY:{chinese:"Â°ûÊµ¶Ë∑ØÊñØ",english:"Cyprus",},CZ:{chinese:"Êç∑ÂÖãÂÖ±ÂíåÂõΩ",english:"Czech Republic",},DK:{chinese:"‰∏πÈ∫¶",english:"Denmark",},DJ:{chinese:"ÂêâÂ∏ÉÊèê",english:"Djibouti",},DO:{chinese:"Â§öÁ±≥Â∞ºÂä†ÂÖ±ÂíåÂõΩ",english:"Dominican Republic",},EC:{chinese:"ÂéÑÁìúÂ§öÂ∞î",english:"Ecuador",},EG:{chinese:"ÂüÉÂèä",english:"Egypt",},SV:{chinese:"Ëê®Â∞îÁì¶Â§ö",english:"EI Salvador",},GQ:{chinese:"Ëµ§ÈÅìÂá†ÂÜÖ‰∫ö",english:"Equatorial Guinea",},ER:{chinese:"ÂéÑÁ´ãÁâπÈáå‰∫ö",english:"Eritrea",},EE:{chinese:"Áà±Ê≤ôÂ∞º‰∫ö",english:"Estonia",},ET:{chinese:"ÂüÉÂ°û‰øÑÊØî‰∫ö",english:"Ethiopia",},FJ:{chinese:"ÊñêÊµé",english:"Fiji",},FI:{chinese:"Ëä¨ÂÖ∞",english:"Finland",},FR:{chinese:"Ê≥ïÂõΩ",english:"France",},GA:{chinese:"Âä†Ëì¨",english:"Gabon",},GM:{chinese:"ÂÜàÊØî‰∫ö",english:"Gambia",},GE:{chinese:"Ê†ºÈ≤ÅÂêâ‰∫ö",english:"Georgia",},DE:{chinese:"Âæ∑ÂõΩ",english:"Germany",},GH:{chinese:"Âä†Á∫≥",english:"Ghana",},GR:{chinese:"Â∏åËÖä",english:"Greece",},GL:{chinese:"Ê†ºÈôµÂÖ∞",english:"Greenland",},GT:{chinese:"Âç±Âú∞È©¨Êãâ",english:"Guatemala",},GN:{chinese:"Âá†ÂÜÖ‰∫ö",english:"Guinea",},GY:{chinese:"Âú≠‰∫öÈÇ£",english:"Guyana",},HT:{chinese:"Êµ∑Âú∞",english:"Haiti",},HN:{chinese:"Ê¥™ÈÉΩÊãâÊñØ",english:"Honduras",},HK:{chinese:"‰∏≠ÂõΩÈ¶ôÊ∏Ø",english:"Hong Kong",},HU:{chinese:"ÂåàÁâôÂà©",english:"Hungary",},IS:{chinese:"ÂÜ∞Â≤õ",english:"Iceland",},IN:{chinese:"Âç∞Â∫¶",english:"India",},ID:{chinese:"Âç∞Â∫¶Â∞ºË•ø‰∫ö",english:"Indonesia",},IR:{chinese:"‰ºäÊúó",english:"Iran",},IQ:{chinese:"‰ºäÊãâÂÖã",english:"Iraq",},IE:{chinese:"Áà±Â∞îÂÖ∞",english:"Ireland",},IM:{chinese:"È©¨ÊÅ©Â≤õ",english:"Isle of Man",},IL:{chinese:"‰ª•Ëâ≤Âàó",english:"Israel",},IT:{chinese:"ÊÑèÂ§ßÂà©",english:"Italy",},CI:{chinese:"ÁßëÁâπËø™Áì¶",english:"Ivory Coast",},JM:{chinese:"Áâô‰π∞Âä†",english:"Jamaica",},JP:{chinese:"Êó•Êú¨",english:"Japan",},JO:{chinese:"Á∫¶Êó¶",english:"Jordan",},KZ:{chinese:"ÂìàËê®ÂÖãÊñØÂù¶",english:"Kazakstan",},KE:{chinese:"ËÇØÂ∞º‰∫ö",english:"Kenya",},KR:{chinese:"Èü©ÂõΩ",english:"Korea",},KW:{chinese:"ÁßëÂ®ÅÁâπ",english:"Kuwait",},KG:{chinese:"ÂêâÂ∞îÂêâÊñØÊñØÂù¶",english:"Kyrgyzstan",},LA:{chinese:"ËÄÅÊåù",english:"Laos",},LV:{chinese:"ÊãâËÑ±Áª¥‰∫ö",english:"Latvia",},LB:{chinese:"ÈªéÂ∑¥Â´©",english:"Lebanon",},LS:{chinese:"Ëé±Á¥¢Êâò",english:"Lesotho",},LR:{chinese:"Âà©ÊØîÈáå‰∫ö",english:"Liberia",},LY:{chinese:"Âà©ÊØî‰∫ö",english:"Libya",},LT:{chinese:"Á´ãÈô∂ÂÆõ",english:"Lithuania",},LU:{chinese:"Âç¢Ê£ÆÂ†°",english:"Luxembourg",},MO:{chinese:"‰∏≠ÂõΩÊæ≥Èó®",english:"Macao",},MK:{chinese:"È©¨ÂÖ∂È°ø",english:"Macedonia",},MG:{chinese:"È©¨ËææÂä†ÊñØÂä†",english:"Madagascar",},MW:{chinese:"È©¨ÊãâÁª¥",english:"Malawi",},MY:{chinese:"È©¨Êù•Ë•ø‰∫ö",english:"Malaysia",},MV:{chinese:"È©¨Â∞î‰ª£Â§´",english:"Maldives",},ML:{chinese:"È©¨Èáå",english:"Mali",},MT:{chinese:"È©¨ËÄ≥‰ªñ",english:"Malta",},MR:{chinese:"ÊØõÂà©Â°îÂ∞º‰∫ö",english:"Mauritania",},MU:{chinese:"ÊØõÈáåÊ±ÇÊñØ",english:"Mauritius",},MX:{chinese:"Â¢®Ë•øÂì•",english:"Mexico",},MD:{chinese:"Êë©Â∞îÂ§öÁì¶",english:"Moldova",},MC:{chinese:"Êë©Á∫≥Âì•",english:"Monaco",},MN:{chinese:"ËíôÂè§",english:"Mongolia",},ME:{chinese:"ÈªëÂ±±ÂÖ±ÂíåÂõΩ",english:"Montenegro",},MA:{chinese:"Êë©Ê¥õÂì•",english:"Morocco",},MZ:{chinese:"Ëé´Ê°ëÊØîÂÖã",english:"Mozambique",},MM:{chinese:"ÁºÖÁî∏",english:"Myanmar(Burma)",},NA:{chinese:"Á∫≥Á±≥ÊØî‰∫ö",english:"Namibia",},NP:{chinese:"Â∞ºÊ≥äÂ∞î",english:"Nepal",},NL:{chinese:"Ëç∑ÂÖ∞",english:"Netherlands",},NZ:{chinese:"Êñ∞Ë•øÂÖ∞",english:"New Zealand",},NI:{chinese:"Â∞ºÂä†ÊãâÁìú",english:"Nicaragua",},NE:{chinese:"Â∞ºÊó•Â∞î",english:"Niger",},NG:{chinese:"Â∞ºÊó•Âà©‰∫ö",english:"Nigeria",},KP:{chinese:"ÊúùÈ≤ú",english:"North Korea",},NO:{chinese:"Êå™Â®Å",english:"Norway",},OM:{chinese:"ÈòøÊõº",english:"Oman",},PK:{chinese:"Â∑¥Âü∫ÊñØÂù¶",english:"Pakistan",},PA:{chinese:"Â∑¥ÊãøÈ©¨",english:"Panama",},PY:{chinese:"Â∑¥ÊãâÂú≠",english:"Paraguay",},PE:{chinese:"ÁßòÈ≤Å",english:"Peru",},PH:{chinese:"Ëè≤ÂæãÂÆæ",english:"Philippines",},PL:{chinese:"Ê≥¢ÂÖ∞",english:"Poland",},PT:{chinese:"Ëë°ËêÑÁâô",english:"Portugal",},PR:{chinese:"Ê≥¢Â§öÈªéÂêÑ",english:"Puerto Rico",},QA:{chinese:"Âç°Â°îÂ∞î",english:"Qatar",},RE:{chinese:"ÁïôÂ∞ºÊó∫",english:"Reunion",},RO:{chinese:"ÁΩóÈ©¨Â∞º‰∫ö",english:"Romania",},RU:{chinese:"‰øÑÁΩóÊñØ",english:"Russia",},RW:{chinese:"Âç¢Êó∫Ëææ",english:"Rwanda",},SM:{chinese:"Âú£È©¨ÂäõËØ∫",english:"San Marino",},SA:{chinese:"Ê≤ôÁâπÈòøÊãâ‰ºØ",english:"Saudi Arabia",},SN:{chinese:"Â°ûÂÜÖÂä†Â∞î",english:"Senegal",},RS:{chinese:"Â°ûÂ∞îÁª¥‰∫ö",english:"Serbia",},SL:{chinese:"Â°ûÊãâÂà©ÊòÇ",english:"Sierra Leone",},SG:{chinese:"Êñ∞Âä†Âù°",english:"Singapore",},SK:{chinese:"ÊñØÊ¥õ‰ºêÂÖã",english:"Slovakia",},SI:{chinese:"ÊñØÊ¥õÊñáÂ∞º‰∫ö",english:"Slovenia",},SO:{chinese:"Á¥¢È©¨Èáå",english:"Somalia",},ZA:{chinese:"ÂçóÈùû",english:"South Africa",},ES:{chinese:"Ë•øÁè≠Áâô",english:"Spain",},LK:{chinese:"ÊñØÈáåÂÖ∞Âç°",english:"Sri Lanka",},SD:{chinese:"Ëãè‰∏π",english:"Sudan",},SR:{chinese:"ËãèÈáåÂçó",english:"Suriname",},SZ:{chinese:"ÊñØÂ®ÅÂ£´ÂÖ∞",english:"Swaziland",},SE:{chinese:"ÁëûÂÖ∏",english:"Sweden",},CH:{chinese:"ÁëûÂ£´",english:"Switzerland",},SY:{chinese:"ÂèôÂà©‰∫ö",english:"Syria",},TW:{chinese:"‰∏≠ÂõΩÂè∞Êπæ",english:"Taiwan",},TJ:{chinese:"Â°îÂêâÂÖãÊñØÂù¶",english:"Tajikstan",},TZ:{chinese:"Âù¶Ê°ëÂ∞º‰∫ö",english:"Tanzania",},TH:{chinese:"Ê≥∞ÂõΩ",english:"Thailand",},TG:{chinese:"Â§öÂì•",english:"Togo",},TO:{chinese:"Ê±§Âä†",english:"Tonga",},TT:{chinese:"ÁâπÁ´ãÂ∞ºËææÂíåÂ§öÂ∑¥Âì•",english:"Trinidad and Tobago",},TN:{chinese:"Á™ÅÂ∞ºÊñØ",english:"Tunisia",},TR:{chinese:"ÂúüËÄ≥ÂÖ∂",english:"Turkey",},TM:{chinese:"ÂúüÂ∫ìÊõºÊñØÂù¶",english:"Turkmenistan",},VI:{chinese:"ÁæéÂ±ûÁª¥Â∞î‰∫¨Áæ§Â≤õ",english:"U.S. Virgin Islands",},UG:{chinese:"‰πåÂπ≤Ëææ",english:"Uganda",},UA:{chinese:"‰πåÂÖãÂÖ∞",english:"Ukraine",},AE:{chinese:"ÈòøÊãâ‰ºØËÅîÂêàÈÖãÈïøÂõΩ",english:"United Arab Emirates",},GB:{chinese:"Ëã±ÂõΩ",english:"United Kiongdom",},US:{chinese:"ÁæéÂõΩ",english:"USA",},UY:{chinese:"‰πåÊãâÂú≠",english:"Uruguay",},UZ:{chinese:"‰πåÂÖπÂà´ÂÖãÊñØÂù¶",english:"Uzbekistan",},VA:{chinese:"Ê¢µËíÇÂÜàÂüé",english:"Vatican City",},VE:{chinese:"ÂßîÂÜÖÁëûÊãâ",english:"Venezuela",},VN:{chinese:"Ë∂äÂçó",english:"Vietnam",},YE:{chinese:"‰πüÈó®",english:"Yemen",},YU:{chinese:"ÂçóÊñØÊãâÂ§´",english:"Yugoslavia",},ZR:{chinese:"Êâé‰ºäÂ∞î",english:"Zaire",},ZM:{chinese:"ËµûÊØî‰∫ö",english:"Zambia",},ZW:{chinese:"Ê¥•Â∑¥Â∏ÉÈü¶",english:"Zimbabwe",}}

function loadCarrierNames() {
    //Êï¥ÁêÜÈÇèËºØ:Ââç‰∏âÁ¢ºÁõ∏Âêå->ÂæåÂÖ©Á¢ºÂêåÈõª‰ø°->Ââ©‰∏ãÁöÑ
    return {
        //Âè∞ÁÅ£Èõª‰ø°Ê•≠ËÄÖ Taiwan
        '466-11': '‰∏≠ËèØÈõª‰ø°', '466-92': '‰∏≠ËèØÈõª‰ø°',
        '466-01': 'ÈÅ†ÂÇ≥Èõª‰ø°', '466-03': 'ÈÅ†ÂÇ≥Èõª‰ø°',
        '466-97': 'Âè∞ÁÅ£Â§ßÂì•Â§ß', '466-89': 'Âè∞ÁÅ£‰πãÊòü', '466-05': 'GT',
        //‰∏≠ÂúãÈõª‰ø°Ê•≠ËÄÖ China
        '460-03': '‰∏≠ÂõΩÁîµ‰ø°', '460-05': '‰∏≠ÂõΩÁîµ‰ø°', '460-11': '‰∏≠ÂõΩÁîµ‰ø°',
        '460-01': '‰∏≠ÂõΩËÅîÈÄö', '460-06': '‰∏≠ÂõΩËÅîÈÄö', '460-09': '‰∏≠ÂõΩËÅîÈÄö',
        '460-00': '‰∏≠ÂõΩÁßªÂä®', '460-02': '‰∏≠ÂõΩÁßªÂä®', '460-04': '‰∏≠ÂõΩÁßªÂä®', '460-07': '‰∏≠ÂõΩÁßªÂä®', '460-08': '‰∏≠ÂõΩÁßªÂä®',
        '460-15': '‰∏≠ÂõΩÂπøÁîµ', '460-20': '‰∏≠ÁßªÈìÅÈÄö',
        //È¶ôÊ∏ØÈõª‰ø°Ê•≠ËÄÖ HongKong
        '454-00': 'CSL', '454-02': 'CSL', '454-10': 'CSL', '454-18': 'CSL',
        '454-03': '3', '454-04': '3', '454-05': '3',
        '454-06': 'SMC HK', '454-15': 'SMC HK', '454-17': 'SMC HK',
        '454-09': 'CMHK', '454-12': 'CMHK', '454-13': 'CMHK', '454-28': 'CMHK', '454-31': 'CMHK',
        '454-16': 'csl.', '454-19': 'csl.', '454-20': 'csl.', '454-29': 'csl.',
        '454-01': '‰∏≠‰ø°ÂúãÈöõÈõªË®ä', '454-07': 'UNICOM HK', '454-08': 'Truphone', '454-11': 'CHKTL', '454-23': 'Lycamobile',
        //Êó•Êú¨Èõª‰ø°Ê•≠ËÄÖ Japan
        '440-00': 'Y!mobile', '440-10': 'docomo', '440-11': 'Rakuten', '440-20': 'SoftBank',
        '440-50': ' au', '440-51': ' au', '440-52': ' au', '440-53': ' au', '440-54': ' au',
        '441-00': 'WCP', '441-10': 'UQ WiMAX',
        //ÈüìÂúãÈõª‰ø°Ê•≠ËÄÖ Korea
        '450-03': 'SKT', '450-05': 'SKT',
        '450-02': 'KT', '450-04': 'KT', '450-08': 'KT',
        '450-06': 'LG U+', '450-10': 'LG U+',
        //ÁæéÂúãÈõª‰ø°Ê•≠ËÄÖ USA
        '310-030': 'AT&T', '310-070': 'AT&T', '310-150': 'AT&T', '310-170': 'AT&T', '310-280': 'AT&T', '310-380': 'AT&T', '310-410': 'AT&T', '310-560': 'AT&T', '310-680': 'AT&T', '310-980': 'AT&T',
        '310-160': 'T-Mobile', '310-200': 'T-Mobile', '310-210': 'T-Mobile', '310-220': 'T-Mobile', '310-230': 'T-Mobile', '310-240': 'T-Mobile', '310-250': 'T-Mobile', '310-260': 'T-Mobile', '310-270': 'T-Mobile', '310-300': 'T-Mobile', '310-310': 'T-Mobile', '310-660': 'T-Mobile', '310-800': 'T-Mobile', '311-660': 'T-Mobile', '311-882': 'T-Mobile', '311-490': 'T-Mobile', '312-530': 'T-Mobile', '311-870': 'T-Mobile', '311-880': 'T-Mobile',
        '310-004': 'Verizon', '310-010': 'Verizon', '310-012': 'Verizon', '310-013': 'Verizon', '311-110': 'Verizon', '311-270': 'Verizon', '311-271': 'Verizon', '311-272': 'Verizon', '311-273': 'Verizon', '311-274': 'Verizon', '311-275': 'Verizon', '311-276': 'Verizon', '311-277': 'Verizon', '311-278': 'Verizon', '311-279': 'Verizon', '311-280': 'Verizon', '311-281': 'Verizon', '311-282': 'Verizon', '311-283': 'Verizon', '311-284': 'Verizon', '311-285': 'Verizon', '311-286': 'Verizon', '311-287': 'Verizon', '311-288': 'Verizon', '311-289': 'Verizon', '311-390': 'Verizon', '311-480': 'Verizon', '311-481': 'Verizon', '311-482': 'Verizon', '311-483': 'Verizon', '311-484': 'Verizon', '311-485': 'Verizon', '311-486': 'Verizon', '311-487': 'Verizon', '311-488': 'Verizon', '311-489': 'Verizon', '310-590': 'Verizon', '310-890': 'Verizon', '310-910': 'Verizon',
        '310-120': 'Sprint',
        '310-850': 'Aeris Comm. Inc.', '310-510': 'Airtel Wireless LLC', '312-090': 'Allied Wireless Communications Corporation', '310-710': 'Arctic Slope Telephone Association Cooperative Inc.', '311-440': 'Bluegrass Wireless LLC', '311-800': 'Bluegrass Wireless LLC', '311-810': 'Bluegrass Wireless LLC', '310-900': 'Cable & Communications Corp.', '311-590': 'California RSA No. 3 Limited Partnership', '311-500': 'Cambridge Telephone Company Inc.', '310-830': 'Caprock Cellular Ltd.', '312-270': 'Cellular Network Partnership LLC', '312-280': 'Cellular Network Partnership LLC', '310-360': 'Cellular Network Partnership LLC', '311-120': 'Choice Phone LLC', '310-480': 'Choice Phone LLC', '310-420': 'Cincinnati Bell Wireless LLC', '310-180': 'Cingular Wireless', '310-620': 'Coleman County Telco /Trans TX', '310-06': 'Consolidated Telcom', '310-60': 'Consolidated Telcom', '310-700': 'Cross Valliant Cellular Partnership', '312-030': 'Cross Wireless Telephone Co.', '311-140': 'Cross Wireless Telephone Co.', '312-040': 'Custer Telephone Cooperative Inc.', '310-440': 'Dobson Cellular Systems', '310-990': 'E.N.M.R. Telephone Coop.', '312-120': 'East Kentucky Network LLC', '312-130': 'East Kentucky Network LLC', '310-750': 'East Kentucky Network LLC', '310-090': 'Edge Wireless LLC', '310-610': 'Elkhart TelCo. / Epic Touch Co.', '311-311': 'Farmers', '311-460': 'Fisher Wireless Services Inc.', '311-370': 'GCI Communication Corp.', '310-430': 'GCI Communication Corp.', '310-920': 'Get Mobile Inc.', '311-340': 'Illinois Valley Cellular RSA 2 Partnership', '312-170': 'Iowa RSA No. 2 Limited Partnership', '311-410': 'Iowa RSA No. 2 Limited Partnership', '310-770': 'Iowa Wireless Services LLC', '310-650': 'Jasper', '310-870': 'Kaplan Telephone Company Inc.', '312-180': 'Keystone Wireless LLC', '310-690': 'Keystone Wireless LLC', '311-310': 'Lamar County Cellular', '310-016': 'Leap Wireless International Inc.', '310-040': 'Matanuska Tel. Assn. Inc.', '310-780': 'Message Express Co. / Airlink PCS', '311-330': 'Michigan Wireless LLC', '310-400': 'Minnesota South. Wirel. Co. / Hickory', '311-010': 'Missouri RSA No 5 Partnership', '312-010': 'Missouri RSA No 5 Partnership', '311-020': 'Missouri RSA No 5 Partnership', '312-220': 'Missouri RSA No 5 Partnership', '311-920': 'Missouri RSA No 5 Partnership', '310-350': 'Mohave Cellular LP', '310-570': 'MTPCS LLC', '310-290': 'NEP Cellcorp Inc.', '310-34': 'Nevada Wireless LLC', '310-600': 'New-Cell Inc.', '311-300': 'Nexus Communications Inc.', '310-130': 'North Carolina RSA 3 Cellular Tel. Co.', '312-230': 'North Dakota Network Company', '311-610': 'North Dakota Network Company', '310-450': 'Northeast Colorado Cellular Inc.', '311-710': 'Northeast Wireless Networks LLC', '310-011': 'Northstar', '310-670': 'Northstar', '311-420': 'Northwest Missouri Cellular Limited Partnership', '310-760': 'Panhandle Telephone Cooperative Inc.', '310-580': 'PCS ONE', '311-170': 'PetroCom', '311-670': 'Pine Belt Cellular, Inc.', '310-100': 'Plateau Telecommunications Inc.', '310-940': 'Poka Lambro Telco Ltd.', '310-500': 'Public Service Cellular Inc.', '312-160': 'RSA 1 Limited Partnership', '311-430': 'RSA 1 Limited Partnership', '311-350': 'Sagebrush Cellular Inc.', '310-46': 'SIMMETRY', '311-260': 'SLO Cellular Inc / Cellular One of San Luis', '310-320': 'Smith Bagley Inc.', '316-011': 'Southern Communications Services Inc.', '310-740': 'Telemetrix Inc.', '310-14': 'Testing', '310-860': 'Texas RSA 15B2 Limited Partnership', '311-050': 'Thumb Cellular Limited Partnership', '311-830': 'Thumb Cellular Limited Partnership', '310-460': 'TMP Corporation', '310-490': 'Triton PCS', '312-290': 'Uintah Basin Electronics Telecommunications Inc.', '311-860': 'Uintah Basin Electronics Telecommunications Inc.', '310-960': 'Uintah Basin Electronics Telecommunications Inc.', '310-020': 'Union Telephone Co.', '311-220': 'United States Cellular Corp.', '310-730': 'United States Cellular Corp.', '311-650': 'United Wireless Communications Inc.', '310-003': 'Unknown', '310-15': 'Unknown', '310-23': 'Unknown', '310-24': 'Unknown', '310-25': 'Unknown', '310-26': 'Unknown', '310-190': 'Unknown', '310-950': 'Unknown', '310-38': 'USA 3650 AT&T', '310-999': 'Various Networks', '310-520': 'VeriSign', '310-530': 'West Virginia Wireless', '310-340': 'Westlink Communications, LLC', '311-070': 'Wisconsin RSA #7 Limited Partnership', '310-390': 'Yorkville Telephone Cooperative',
        //Ëã±ÂúãÈõª‰ø°Ê•≠ËÄÖ UK
        '234-08': 'BT OnePhone UK','234-10': 'O2-UK','234-15': 'vodafone UK','234-20': '3','234-30': 'EE','234-33': 'EE','234-38': 'Virgin','234-50': 'JT','234-55': 'Sure','234-58': 'Manx Telecom',
        //Ëè≤ÂæãË≥ìÈõª‰ø°Ê•≠ËÄÖ Philippine
        '515-01': 'Islacom', '515-02': 'Globe', '515-03': 'Smart', '515-04': 'Sun', '515-08': 'Next Mobile', '515-18': 'Cure', '515-24': 'ABS-CBN',
        //Ë∂äÂçóÈõª‰ø°Ê•≠ËÄÖ Vietnam
        '452-01': 'Mobifone', '452-02': 'VinaPhone', '452-03': 'S-Fone', '452-04': 'Viettel', '452-05': 'VietNamobile', '452-06': 'E-mobile', '452-07': 'Gmobile',
    };
}
